# .github/workflows/build.yml
name: Build and Release

on:
  push:
    branches: ["main"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends crossbuild-essential-arm64 gcc-aarch64-linux-gnu

      - name: Build binary
        # Set the linker explicitly for cross-compilation targets on Linux
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: cargo build --verbose --release --target ${{ matrix.target }}

      - name: Package binary (Linux/macOS)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          cd target/${{ matrix.target }}/release
          # Use the correct binary name here
          tar czvf i2pd-webconsole-exporter-${{ matrix.target }}.tar.gz i2pd-webconsole-exporter
          cd ../../..

      - name: Upload artifact (Linux/macOS)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: i2pd-webconsole-exporter-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/i2pd-webconsole-exporter-${{ matrix.target }}.tar.gz

  release:
    name: Create GitHub Release
    needs: build # Run after build job completes
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') # Only run on tag pushes
    # Grant permissions for the GITHUB_TOKEN to allow creating releases
    permissions:
      contents: write

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/ # Download all artifacts to this directory

      - name: List downloaded artifacts # Optional: for debugging
        run: ls -R artifacts/

      - name: Generate checksums for archives
        run: |
          cd artifacts
          # Use find to handle files in subdirectories
          # Generate sha256sums for the .tar.gz files and store in sha256sums.txt
          find . -name '*.tar.gz' -exec sha256sum {} + > sha256sums.txt
          echo "Generated checksums:"
          cat sha256sums.txt
          cd ..

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # This automatically creates a draft release based on the tag
          files: |
            artifacts/*/*.tar.gz
            artifacts/sha256sums.txt

  publish:
    name: Publish to crates.io
    needs: build # Run after build job completes
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') # Only run on tag pushes

    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Publish crate
        env:
          # The API token for crates.io stored as a repository secret
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish
